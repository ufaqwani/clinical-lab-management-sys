from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.lib.colors import Color, black, red, blue, green
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from django.conf import settings
from django.utils import timezone
from io import BytesIO
import os

class LabReportGenerator:
    def __init__(self, report_instance):
        self.report = report_instance
        self.patient = report_instance.patient
        self.tests = report_instance.tests.all()
        self.template = report_instance.template
        
        # Page setup
        self.pagesize = A4
        self.margin = 25 * mm
        
        # Colors
        self.primary_color = Color(0.2, 0.3, 0.7)  # Professional blue
        self.secondary_color = Color(0.5, 0.5, 0.5)  # Gray
        self.abnormal_color = Color(0.8, 0.2, 0.2)  # Red for abnormal values
        
        # Styles
        self.styles = getSampleStyleSheet()
        self._create_custom_styles()
    
    def _create_custom_styles(self):
        """Create custom paragraph styles"""
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=20,
            textColor=self.primary_color,
            alignment=TA_CENTER
        ))
        
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceBefore=15,
            spaceAfter=10,
            textColor=self.primary_color,
            leftIndent=0
        ))
        
        self.styles.add(ParagraphStyle(
            name='TestResult',
            parent=self.styles['Normal'],
            fontSize=10,
            leftIndent=20
        ))
        
        self.styles.add(ParagraphStyle(
            name='AbnormalResult',
            parent=self.styles['Normal'],
            fontSize=10,
            leftIndent=20,
            textColor=self.abnormal_color,
            fontName='Helvetica-Bold'
        ))
    
    def generate_pdf(self):
        """Generate the complete PDF report"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=self.pagesize,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin,
            bottomMargin=self.margin
        )
        
        # Build the story (content)
        story = []
        
        # Add header
        story.extend(self._build_header())
        story.append(Spacer(1, 20))
        
        # Add patient information
        story.extend(self._build_patient_info())
        story.append(Spacer(1, 15))
        
        # Add test results
        story.extend(self._build_test_results())
        story.append(Spacer(1, 20))
        
        # Add footer
        story.extend(self._build_footer())
        
        # Build the PDF
        doc.build(story)
        
        # Get the value of the BytesIO buffer
        pdf_content = buffer.getvalue()
        buffer.close()
        
        return pdf_content
    
    def _build_header(self):
        """Build report header with logo and title"""
        elements = []
        
        # Laboratory name and title
        title_text = f"<b>Clinical Laboratory Report</b>"
        title = Paragraph(title_text, self.styles['CustomTitle'])
        elements.append(title)
        
        # Report metadata
        report_info = f"""
        <b>Report ID:</b> {self.report.report_id}<br/>
        <b>Generated:</b> {self.report.generated_date.strftime('%B %d, %Y at %I:%M %p')}<br/>
        <b>Generated By:</b> {self.report.generated_by.get_full_name() or self.report.generated_by.username}
        """
        
        info_para = Paragraph(report_info, self.styles['Normal'])
        elements.append(info_para)
        
        return elements
    
    def _build_patient_info(self):
        """Build patient information section"""
        elements = []
        
        # Section header
        header = Paragraph("Patient Information", self.styles['SectionHeader'])
        elements.append(header)
        
        # Patient details table
        patient_data = [
            ['Patient ID:', self.patient.patient_id],
            ['Name:', self.patient.full_name],
            ['Date of Birth:', self.patient.date_of_birth.strftime('%B %d, %Y')],
            ['Gender:', self.patient.get_gender_display()],
            ['Blood Group:', self.patient.blood_group or 'Not specified'],
        ]
        
        if self.patient.phone_number:
            patient_data.append(['Phone:', self.patient.phone_number])
        
        patient_table = Table(patient_data, colWidths=[2*inch, 4*inch])
        patient_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 0),
            ('RIGHTPADDING', (0, 0), (-1, -1), 0),
            ('TOPPADDING', (0, 0), (-1, -1), 3),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        
        elements.append(patient_table)
        return elements
    
    def _build_test_results(self):
        """Build test results section"""
        elements = []
        
        # Section header
        header = Paragraph("Test Results", self.styles['SectionHeader'])
        elements.append(header)
        
        # Group tests by category
        test_categories = {}
        for test in self.tests:
            category = test.test_type.category.name
            if category not in test_categories:
                test_categories[category] = []
            test_categories[category].append(test)
        
        # Build results for each category
        for category, tests in test_categories.items():
            # Category header
            cat_header = Paragraph(f"<b>{category}</b>", self.styles['Heading3'])
            elements.append(cat_header)
            
            # Results table
            results_data = [['Test', 'Result', 'Reference Range', 'Units', 'Status']]
            
            for test in tests:
                if hasattr(test, 'result') and test.result:
                    result = test.result
                    status = 'Abnormal' if result.is_abnormal else 'Normal'
                    status_color = colors.red if result.is_abnormal else colors.green
                    
                    results_data.append([
                        test.test_type.name,
                        result.result_value,
                        test.test_type.reference_range,
                        test.test_type.units or '',
                        status
                    ])
                else:
                    results_data.append([
                        test.test_type.name,
                        'Pending',
                        test.test_type.reference_range,
                        test.test_type.units or '',
                        'Pending'
                    ])
            
            results_table = Table(results_data, colWidths=[2*inch, 1*inch, 1.5*inch, 0.8*inch, 0.8*inch])
            results_table.setStyle(TableStyle([
                # Header row
                ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                
                # Data rows
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
                
                # Grid
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                
                # Padding
                ('LEFTPADDING', (0, 0), (-1, -1), 6),
                ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                ('TOPPADDING', (0, 0), (-1, -1), 6),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            
            # Color abnormal results
            for i, test in enumerate(tests, 1):
                if hasattr(test, 'result') and test.result and test.result.is_abnormal:
                    results_table.setStyle(TableStyle([
                        ('TEXTCOLOR', (1, i), (1, i), self.abnormal_color),
                        ('FONTNAME', (1, i), (1, i), 'Helvetica-Bold'),
                        ('TEXTCOLOR', (4, i), (4, i), self.abnormal_color),
                        ('FONTNAME', (4, i), (4, i), 'Helvetica-Bold'),
                    ]))
            
            elements.append(results_table)
            elements.append(Spacer(1, 15))
        
        # Add technical notes if any
        technical_notes = []
        for test in self.tests:
            if hasattr(test, 'result') and test.result and test.result.technician_notes:
                technical_notes.append(f"<b>{test.test_type.name}:</b> {test.result.technician_notes}")
        
        if technical_notes:
            notes_header = Paragraph("Technical Notes", self.styles['SectionHeader'])
            elements.append(notes_header)
            
            notes_text = "<br/>".join(technical_notes)
            notes_para = Paragraph(notes_text, self.styles['Normal'])
            elements.append(notes_para)
        
        return elements
    
    def _build_footer(self):
        """Build report footer"""
        elements = []
        
        elements.append(Spacer(1, 30))
        
        # Signature section
        if self.report.signed_by:
            signature_text = f"""
            <b>Electronically signed by:</b><br/>
            {self.report.signed_by.get_full_name() or self.report.signed_by.username}<br/>
            <b>Date:</b> {self.report.signed_date.strftime('%B %d, %Y at %I:%M %p') if self.report.signed_date else 'Not signed'}
            """
        else:
            signature_text = "<b>Status:</b> Pending signature"
        
        signature_para = Paragraph(signature_text, self.styles['Normal'])
        elements.append(signature_para)
        
        elements.append(Spacer(1, 20))
        
        # Footer text
        footer_text = self.template.footer_text or "This report is electronically generated."
        footer_para = Paragraph(footer_text, self.styles['Normal'])
        elements.append(footer_para)
        
        # Report ID and page info
        report_footer = f"Report ID: {self.report.report_id} | Generated: {timezone.now().strftime('%Y-%m-%d %H:%M')}"
        footer_id = Paragraph(report_footer, self.styles['Normal'])
        elements.append(footer_id)
        
        return elements
